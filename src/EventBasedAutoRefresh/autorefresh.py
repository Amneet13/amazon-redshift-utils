import json
import logging
import boto3
import os
import time


logger = logging.getLogger()
logger.setLevel(logging.INFO)
rsapi = boto3.client('redshift-data')
kfhose = boto3.client('firehose')
snsclient = boto3.client('sns')
dynamodb = boto3.resource('dynamodb')
tablename = os.environ['DDBTABLE']
ddbtable = dynamodb.Table(tablename)
snstopic = os.getenv('SNSTOPIC',None)
maxfailures = 5


def check_refresh_status(ddbitem):
  checksql = f"select query from stv_recents where status <> 'Done' and db_name = '{ddbitem['database_name']}' and user_name='IAM:{ddbitem['username']}' and query = '{ddbitem['sql']}'"
  logger.debug(checksql)
  response = rsapi.execute_statement(ClusterIdentifier=ddbitem['clusterid'], Database=ddbitem['database_name'], DbUser=ddbitem['username'], 
                                      Sql=checksql, StatementName=f"Check {ddbitem['mvname']} refresh status")
  logger.info(json.dumps(response, default=str))                             
  queryid = response['Id']
  status = None         
  while status not in ['FAILED','FINISHED']:
    status = rsapi.describe_statement(Id=queryid)['Status']
    logger.debug(status)
    time.sleep(5)
  numrows = rsapi.get_statement_result(Id=queryid)['TotalNumRows']
  logger.info(f"Check status query: {queryid} \nNumrows: {numrows} \n{json.dumps(response, default=str)}")
  return(numrows)


def execute_statement(ddbitem):
  if ddbitem:
    if ddbitem['autorefresh']:
      response = rsapi.execute_statement(ClusterIdentifier=ddbitem['clusterid'], Database=ddbitem['database_name'], DbUser=ddbitem['username'], 
                                          Sql=ddbitem['sql'], StatementName=ddbitem['mvname'], WithEvent=True)
      logger.info(f"Redshift api response: {json.dumps(response, default=str)}")
      logger.info(f"Sent query to {ddbitem['clusterid']} to refresh {ddbitem['mvname']} in database {ddbitem['database_name']}")
    else:
      msg = f"Auto Refresh is disabled on MV {ddbitem['mvname']} in database {ddbitem['database_name']} for cluster {ddbitem['clusterid']}"
      logger.info(f"{msg} Skipping...")
      if snstopic:
        snsclient.publish(TopicArn=snstopic,
                          Message=msg, Subject=f"{ddbitem['mvname']} MV Refresh on {ddbitem['clusterid']}")
  else:
    logger.info("Item not found!")
            
    
def trigger_first_refresh(record):
  try:
    eventName = record['eventName']
    logger.info(f"Event type is {eventName}...")
    if eventName != 'REMOVE':
      if eventName == 'MODIFY':
        oldimage = record['dynamodb']['OldImage']
        prevautorefresh = oldimage['autorefresh']['BOOL']
      else:
        prevautorefresh = None
      newimage = record['dynamodb']['NewImage']
      ddbitem = {'failure_cnt': newimage['failure_cnt']['N'], 'clusterid': newimage['clusterid']['S']
              , 'database_name': newimage['database_name']['S'], 'autorefresh': newimage['autorefresh']['BOOL']
              , 'username': newimage['username']['S'], 'mvname': newimage['mvname']['S']
              , 'sql': newimage['sql']['S'] }
      logger.info(f"Extracted {ddbitem['mvname']} attributes from dynamodb event: {ddbitem}")
      if (ddbitem['autorefresh'] and not prevautorefresh) or eventName == 'INSERT':
        msg = f"Starting Auto Refresh on MV {ddbitem['mvname']} in database {ddbitem['database_name']} for cluster {ddbitem['clusterid']}"
        logger.info(msg)
        if snstopic:
          snsclient.publish(TopicArn=snstopic, Message=msg, Subject=f"{ddbitem['mvname']} MV Refresh on {ddbitem['clusterid']}")
        execute_statement(ddbitem)
      elif ddbitem['autorefresh'] is False:
        execute_statement(ddbitem)
  except KeyError as e:
    logger.error(f"Key Error: {e} is missing in dynamodb response") 
  except Exception as e:
    logger.exception(e) 


def trigger_next_refresh(record):
  msgbody = json.loads(record['body'])
  caller_function = msgbody['detail']['principal'].split('/')[-1]
  logger.info(json.dumps(msgbody, default=str))
  mvname = msgbody['detail']['statementName']
  clusterid = msgbody['resources'][0].split(':')[-1]
  logger.info(f"MV: {mvname} Clusterid: {clusterid}")
  ddbresponse = ddbtable.get_item(Key={'mvname': mvname, 'clusterid': clusterid}, ConsistentRead=True)
  logger.debug(f"Get item DDB response: {json.dumps(ddbresponse, default=str)}")
  ddbitem = ddbresponse['Item']
  msgsubject = f"{mvname} MV Refresh on {clusterid}"
  # Check and ensure that message received was generated by this Lambda function
  if caller_function == record['function_name'] and ddbitem:
    dbname = ddbitem['database_name']
    numrows = check_refresh_status(ddbitem)
    if numrows == 0:
      dbname = ddbitem['database_name']
      failure_cnt = int(ddbitem['failure_cnt'])
      if msgbody['detail']['state'] == 'FINISHED': 
        execute_statement(ddbitem)
        if failure_cnt > 0:
          logger.info(f"Refresh succeeded. Resetting failure_cnt for MV {mvname} in cluster {clusterid} to 0.")
          dynamodb.Table(tablename).update_item(Key={'mvname': mvname, 'clusterid': clusterid}, UpdateExpression="set failure_cnt = :val"
                                                ,ExpressionAttributeValues={':val': 0}, ReturnValues="UPDATED_NEW")
      else:
        failure_cnt += 1
        msg = f"Auto Refresh on MV {mvname} in database {dbname} for cluster {clusterid} failed {failure_cnt} times. "
        if failure_cnt < maxfailures:
          dynamodb.Table(tablename).update_item(Key={'mvname': mvname, 'clusterid': clusterid}, UpdateExpression="set failure_cnt = :val"
                                                ,ExpressionAttributeValues={':val': failure_cnt}, ReturnValues="UPDATED_NEW")
          errormsg = f"{msg}. Retrying refresh...\n {msgbody}"
          logger.info(errormsg)
          execute_statement(ddbitem)
          if snstopic:
            snsclient.publish(TopicArn=snstopic, Message=errormsg, Subject=msgsubject)
        else:
          dynamodb.Table(tablename).update_item(Key={'mvname': mvname, 'clusterid': clusterid}, UpdateExpression="set autorefresh = :val, failure_cnt = :cnt"
                                                  ,ExpressionAttributeValues={':val': False, ':cnt': failure_cnt}, ReturnValues="UPDATED_NEW")
          errormsg = msg + f"Autorefresh disabled. Check the materialized view on your Redshift cluster.\n {msgbody}"
          logger.info(errormsg)
          if snstopic:
            snsclient.publish(TopicArn=snstopic, Message=errormsg, Subject=msgsubject)
    else:
      msg = f"There is at least one refresh already running on MV {mvname} in database {dbname} on cluster {clusterid}. Refresh count: {numrows}"
      logger.info(msg)
      if snstopic:
        snsclient.publish(TopicArn=snstopic, Message=msg, Subject=msgsubject)


def lambda_handler(event, context):
  logger.debug(json.dumps(event, default=str))
  for record in event['Records']:
    logger.info(json.dumps(record, default=str))
    eventsource = record['eventSource'] 
    if eventsource == 'aws:dynamodb':
      logger.info('Eventsource is dynamodb...')
      trigger_first_refresh(record)
    elif eventsource == 'aws:sqs':
      logger.info('Eventsource is sqs...')
      record['function_name'] = context.function_name
      trigger_next_refresh(record)
    else:
      logger.info(f"No handling for events from {eventsource}!")
